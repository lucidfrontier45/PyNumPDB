import numpy as np
from numpy.random import rand
from scipy.linalg import eigh
from copy import deepcopy
from StringIO import StringIO
from _io import readPDBFile, writePDBFile, convCrd, CAModel
import _anm 

class ANM(CAModel):
  R = 0.0019872065
  scale_factor = 1.0 / (R * 300.0)
  def __init__(self,pdb_file,maxd=14.0,gamma=1.0,allChain=True):
    CAModel.__init__(self,pdb_file,allChain)
    self._maxd = float(maxd)
    self._gamma = float(gamma) * ANM.scale_factor
    self.garbage = None

  def setGamma(self,gamma):
    self._gamma = float(gamma) * ANM.scale_factor
  
  def setup(self):
    self._mdiff, self._mdist, self._mconnect = _anm.setup(self.crd,self._maxd)

  def editConnect(self,i,j,con):
    if con :
      self._mconnect[i,j]= -1
      self._mconnect[j,i]= -1
    else:
      self._mconnect[i,j]= 0
      self._mconnect[j,i]= 0

  def isConnected(self,i,j):
    if self._mconnect[i,j] == -1:
      return True
    else :
      return False

  def getDistance(self,i,j):
    return self._mdist[i,j]

  def _makeHessian(self):
    self._mhess = self._gamma * _anm.makehess(self._mdiff,self._mdist,\
        self._mconnect)

  def _nma(self,neig=10):
    self.eig_val, self.eig_vec = eigh(self._mhess,eigvals=(0,5+neig))
    if np.abs(self.eig_val[5]) > 1.0e-6 : 
      raise ValueError, "6th freq is too lage!"
    self.eig_vec = self.eig_vec.T
    self.garbage = zip(self.eig_val[:6],self.eig_vec[:6].reshape(6,len(self),3))
    self.eig_val = self.eig_val[6:]
    self.eig_vec = self.eig_vec[6:].reshape(neig,len(self),3)
    #self.eig_vec = self.eig_vec.T[6:]
    self.freq = 1/np.sqrt(self.eig_val)

  def runNMA(self,neig=10):
    self._makeHessian()
    self._nma(neig)

  def saveEigenLog(self,out_name="eigen.log"):
    out = file(out_name,"w")
    if self.garbage:
      l = len(self.garbage) + len(self.eig_val)
      for i in range(l):
        if i < 6:
          out.write("\n%8d%20.8g\n\n" % (i+1,self.garbage[i][0]))
          for x in self.garbage[i][1]:
            out.write("%10.4f%10.4f%10.4f\n" % (x[0],x[1],x[2]))
        else:
          out.write("\n%8d%20.8g\n\n" % (i+1,self.eig_val[i-6]))
          for x in self.eig_vec[i-6]:
            out.write("%10.4f%10.4f%10.4f\n" % (x[0],x[1],x[2]))
    else:
      l = len(self.eig_val)
      for i in range(l):
        out.write("\n%8d%20.8g\n\n" % (i+7,self.eig_val[i]))
        for x in self.eig_vec[i]:
          out.write("%10.4f%10.4f%10.4f\n" % (x[0],x[1],x[2]))

    out.close()

  def readEigenLog(self,eig_file):
    self.eig_val = []
    self.eig_vec = []
    eig_temp = _readEigenLog(eig_file).values()
    for eig in eig_temp:
      self.eig_val.append(eig[0])
      self.eig_vec.append(eig[1])
    self.eig_val = np.array(self.eig_val)
    self.eig_vec = np.array(self.eig_vec)


  def calcBfactor(self):
    return _anm.calcbfactor(self.eig_vec,self.eig_val)

  def correlation(self,ivib):
    vec = deepcopy(self.eig_vec[ivib])
    for i in range(len(vec)):
      vec[i] = vec[i] / np.sqrt(np.dot(vec[i],vec[i]))
    return np.dot(vec,vec.T)

  def anmPerturbed(self,neig=6,maxd=2.0,nstruct=100,out_name=None):
    traj = _perturbedCrd(self.crd,self.eig_val,self.eig_vec,neig,maxd,nstruct)

    if out_name:
      for i in range(nstruct):
        out_file = "%s_%05d.pdb" %(out_name,i)
        writePDBFile(out_file,traj[i],self.misc)

    return traj

  def anmMove(self,beig=7,neig=6,step=15,maxd=None,out_name=None):
    res = {}
    for i in range(neig):
      traj = _moveCrd(self.crd,self.eig_val[i],self.eig_vec[i],step,maxd)
      res[i+beig] = deepcopy(traj)

    if out_name :
      for i in range(neig):
          traj = res[i+beig]
          for j in range(len(traj)):
            log_name = "%s_%02d_%03d.pdb" % (out_name,i,j)
            writePDBFile(log_name,traj[j],self.misc)

    return res

def _readEigenLog(file_name):
  """ read eigen_log file which can be generated by ANM program coded by Shiqiao Du"""
  result = {}
  fp = file(file_name)
  for line in fp:
    spl = line.strip().split()
    l = len(spl)
    if l == 2:
      eig_i = int(spl[0])
      eig_v = float(spl[1])
      if eig_i > 6:
        result.setdefault(eig_i,[eig_v,[]])
    if l == 3 and eig_i > 6:
      result[eig_i][1].append(line)
  
  for v in result.values():
    v[1] = np.loadtxt(StringIO("".join(v[1])))

  return result

def _perturbedCrd(crd,eig_val,eig_vec,neig=6,maxd=2.0,nstruct=100):
  """ perturbed structure by randomly move along eigen modes"""
  traj = []
  dim = crd.shape

  natom = np.sqrt(len(crd))
  fluct = np.zeros(neig)
  direct = np.tile(crd,(neig,1,1))
  for i in range(neig):
    fluct[i] = float(natom) / np.sqrt(eig_val[i])
    direct[i] = fluct[i] * eig_vec[i]

  direct = direct.T

  for i in range(nstruct):
    r =  ( rand(neig) * 2.0 - 1.0 ) * maxd
    perturb = (direct * r).T.sum(0)
    trial_struct = crd + perturb
    traj.append(trial_struct)

  return traj

def anmPerturbed(pdb_file,eig_log,out_file,neig=6,maxd=2.0,nstruct=100):
  crd, misc = readPDBFile(pdb_file,allChain=True)
  crd = convCrd(crd,3)
  vibs = _readEigenLog(eig_log).values()
  traj = _perturbedCrd(crd,vibs[0],vibs[1],neig,maxd,nstruct)
  for i in range(nstruct):
    out_name = "%s_%05d.pdb" %(out_file,i)
    writePDBFile(out_name,traj[i],misc)


def _moveCrd(crd,eig_val,eig_vec,step=30,maxd=None):
  """ move coordinate along the eigen direction within the range of maxd by step"""
  traj = []
  natom = np.sqrt(len(crd))
  if maxd == None:
    maxd = 1.0 / np.sqrt(eig_val) 
  d = float(maxd) / step
  small_num = d * 0.1
  for dd in np.arange(-maxd,maxd+small_num,d):
    dr = dd * natom * eig_vec
    traj.append(crd + dr)

  temp1 = traj[step:]
  temp2 = traj[:step:-1]
  traj = traj + traj[::-1]
  traj = traj[step:] + traj[:step]
  return traj

def anmMove(pdb_file,eig_log,out_file,beig=7,neig=6,step=15,maxd=None):
  crd, misc = readPDBFile(pdb_file,allChain=True)
  crd = convCrd(crd,3)
  vibs = _readEigenLog(eig_log)
  for i in range(beig,beig+neig):
    traj = _moveCrd(crd,vibs[i][0],vibs[i][1],step,maxd)
    for j in range(len(traj)):
      log_name = "%s_%02d_%03d.pdb" % (out_file,i,j)
      writePDBFile(log_name,traj[j],misc)

